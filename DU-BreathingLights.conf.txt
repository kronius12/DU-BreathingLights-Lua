{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"--Script Information\n--Version: 0.1\n--Created by:\n\t-- Discord: Kronius12#3176\n\t-- DU in-game: Kronius\n--GitHub: https://github.com/kronius12/DU-BreathingLights-Lua\n--Distributed under GNU General Public License version 3\n\n-- based on scripts by Mucus, Jey123456, Rost, Igor Skoric\n\n--Script parameters\ndebugLevel       = 0     -- Level 1: basic messages - Level 2: verbose\npseudoRandom     = 1    --export: 1 gives same sequence for the given seed, 0 makes the sequence different every time and on every board\npseudoRandomSeed = 9564 --export: If pseudoRandom=1 above, boards with this seed will produce the same sequence of colours\nbreathRate       = 1    --export: Rate of breathing Multiplier\nchangeFrame      = 1201 --export: Frame colour and channel cycle\nbrightnessWhenOff = 122 --export: White level when program is turned off (0..255)\n\n--Initialize global variables\nr, g, b, prngM, prngA, prngC, prngX = 0, 0, 0, 0, 0, 0, 0\n\nfunction round(num, numDecimalPlaces)\n\t-- Igor Skoric (i.skoric@student.tugraz.at)\n    local mult = 10^(numDecimalPlaces or 0)\n    if num >= 0 then return math.floor(num * mult + 0.5) / mult\n    else return math.ceil(num * mult - 0.5) / mult end\nend\n\nfunction initializePseudoRandom(pseudoRandomSeed)\n\t-- Initialize pseudo-random number generator...\n\t-- See Wikipedia for how to select these parameters.\n\tprngM = 134456 \n\tprngA = 8121\n\tprngC = 28411\n\tprngX = round(math.abs(pseudoRandomSeed) * prngM / 256, 0)\n\tif debugLevel > 1 then system.print(\"initializePseudoRandom(\"..pseudoRandomSeed..\")\") end\n\treturn getPseudoRandom(1) -- consume the seed value to start the sequence\nend\n\nfunction getPseudoRandom(maxValue) \n\t-- returns an integer in 0..maxValue\n\tprngX = (prngA * prngX + prngC) % prngM\n\tif debugLevel > 1 then system.print(\"getPseudoRandom(\"..maxValue..\") = \"..(math.floor(maxValue * prngX / prngM))) end\n\treturn math.floor((maxValue + 1) * prngX / prngM)\nend\n\nfunction initializeRGB() \n\t-- resets global rgb values\n\tif pseudoRandom == 0 then\n\t\tr               = math.random(255) -- setup channels\n\t\tg               = math.random(255)\n\t\tb               = math.random(255)\n\telse\n\t\tr               = getPseudoRandom(255)\n\t\tg               = getPseudoRandom(255)\n\t\tb               = getPseudoRandom(255)\n\tend\n\tif debugLevel > 1 then system.print(\"initializeRGB: \"..r..\",\"..g..\",\"..b) end\nend\n\nfunction chooseRgbIndex()\n\t-- picks a channel to vary next\n\tlocal rgbIndex=0\n\tif pseudoRandom == 0 then\n\t\trgbIndex = round(math.random(2)) -- choose channel to breathe\n\telse\n\t\trgbIndex = getPseudoRandom(2)\n\tend\n\tif debugLevel > 1 then system.print(\"chooseRgbIndex: \"..rgbIndex) end\n\treturn rgbIndex\nend\n\nfunction detectLinkedElements(list, classNameContains)\n\t-- populates list with elements of classNameContains\n\tlist = list or {}\n\tfor key, value in pairs(unit) do\n\t  if type(value) == \"table\" and type(value.export) == \"table\" then -- `value` is an element and `key` is the slot name\n\t\tif value.getElementClass then --if it has a class\n\t\t  if string.find(string.lower(value.getElementClass()), classNameContains) then --if its element class contains classNameContains\n\t\t\t   list[#list + 1] = value \n\t\t\t   if debugLevel > 1 then system.print(value.getElementClass()..\"[\"..#list..\"] found\") end\n\t\t  end\n\t\tend\n\t  end\n\tend \n\n\tif debugLevel > 0 then system.print(classNameContains..\" links found: \"..#list) end\n\treturn list\nend\n\nlights = detectLinkedElements({}, \"light\")\nif lights then\n    for i = 1, #lights do\n        lights[i].activate()\n\t\tlights[i].setRGBColor(255,255,255)\n    end\n\torigRgb = lights[1].getRGBColor() -- stores the colour of the original light if you want to reset lights on exit\n\tif debugLevel > 0 then system.print(\"origRgb = \"..origRgb) end\nelse\n\n\tsystem.print(\"ERROR: No lights found. Please link some lights to the program board.\")\n\torigRgb = {0,0,0}\n\nend\n\n-- initialize heartbeat sequence\n\nbClock          = system.getTime() -- start clock\nframeCount      = 0\ninitializePseudoRandom(pseudoRandomSeed)\nrgbIndex = chooseRgbIndex()\ninitializeRGB()\n-- unit.hide() -- hides programming board if desired (doesn't seem to work most of the time)\n\n-- release memory to reduce lag - Jey123456 - 12 Oct 2020 in #du-lua https://dualuniverse.chat/\njson = nil\nvec3 = nil\nAxisCommandManager = nil\n-- utils = nil\nNavigator = nil\nconstants = nil\n-- database = nil\nSGui = nil\nsgui = nil\nClickableArea = nil\naxisCommandType = nil\ngetAxisAngleRad = nil\nAxisCommand = nil\ncollectgarbage(\"collect\")\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"--Script Information\n--Version: 0.1\n--Created by:\n\t-- Discord: Kronius12#3176\n\t-- DU in-game: Kronius\n--GitHub: https://github.com/kronius12/DU-BreathingLights-Lua\n--Distributed under GNU General Public License version 3\n\n-- based on script by Mucus\n\nif debugLevel > 0  then\n    system.print(\"Stopping: #lights=\"..#lights..\" brightnessWhenOff=\"..brightnessWhenOff) \nend\n\nfor i = 1, #lights do\n\tif brightnessWhenOff > 0 then\n\t\tlights[i].setRGBColor(brightnessWhenOff,brightnessWhenOff,brightnessWhenOff)\n\telse\n\t\tlights[i].deactivate()\n\tend\n    if debugLevel > 1 then system.print(\"Light \"..i..\" RGB set to \"..brightnessWhenOff) end\nend\n","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"1"},{"code":"--Script Information\n--Version: 0.1\n--Created by:\n\t-- Discord: Kronius12#3176\n\t-- DU in-game: Kronius\n--GitHub: https://github.com/kronius12/DU-BreathingLights-Lua\n--Distributed under GNU General Public License version 3\n\n-- based on script by Mucus\n\nframeCount = frameCount + 1\n\nif ( frameCount % changeFrame == 0 ) then --re-initialize rgb and channel\n\tinitializeRGB()\n\trgbIndex=chooseRgbIndex()\n\tframeCount=0\n\tif debugLevel > 0 then system.print(\"Colors reset: rgbIndex=\"..rgbIndex) end\nend\n\nnClock = system.getTime()\nlocal timeSeconds = ( nClock - bClock)\nlocal breath = round(( math.exp( math.sin(timeSeconds * breathRate )) - 0.36787944 )* 108.0)\n\nif rgbIndex == 1 then\n\n    r = breath\n\n    elseif rgbIndex == 2 then\n\n    g = breath\n\n    else\n\n    b = breath\n\nend \nif debugLevel > 2 then system.print(frameCount..\": \"..r..\",\"..g..\",\"..b) end\n\n-- set rgb colour of linked lights\n\t\nif lights then\n\n\tfor i = 1, #lights do\n\t\tlights[i].setRGBColor(r,g,b)\n\tend\n\nend\n","filter":{"args":[],"signature":"update()","slotKey":"-2"},"key":"2"}],"methods":[],"events":[]}